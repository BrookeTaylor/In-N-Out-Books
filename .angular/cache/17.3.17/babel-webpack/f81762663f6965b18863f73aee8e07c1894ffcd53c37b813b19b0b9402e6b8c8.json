{"ast":null,"code":"// Add an import statement for the HttpClient and HttpParams\nimport { HttpParams } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let BooksService = /*#__PURE__*/(() => {\n  class BooksService {\n    // In the services constructor add the HttpClient\n    constructor(http) {\n      this.http = http;\n      // Add a new variable named isbns of type string array\n      // and fill it with the following values\n      this.isbns = ['0345339681', '0261103571', '9780593099322', '9780261102361', '9780261102378', '9780590302715', '9780316769532', '9780743273565', '9780590405959'];\n    }\n    // Create two new functions: getBooks() and getBook(isbn: string)\n    // Set the return type to an Observable Array of IBook objects\n    getBooks() {\n      // Create a new variable named params of type HttpParams\n      let params = new HttpParams();\n      // bibkeys, isbns (use the join function to convert the array of isbns to a comma delimited string)\n      params = params.append('bibkeys', this.isbns.join(','));\n      // format, json\n      params = params.append('format', 'json');\n      // jscmd, details\n      params = params.append('jscmd', 'details');\n      // return the http.get function passing in the openlibrary url and the params object\n      return this.http.get('https://openlibrary.org/api/books', {\n        params: params\n      });\n    }\n    static {\n      this.ɵfac = function BooksService_Factory(t) {\n        return new (t || BooksService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: BooksService,\n        factory: BooksService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return BooksService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}